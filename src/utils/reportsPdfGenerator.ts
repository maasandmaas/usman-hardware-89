
import jsPDF from 'jspdf';

interface ReportData {
  title: string;
  period: string;
  generatedAt: string;
  financial?: {
    revenue: number;
    expenses: number;
    profit: number;
    profitMargin: number;
  };
  sales?: {
    totalSales: number;
    avgOrderValue: number;
    topProducts?: Array<{ name: string; revenue: number }>;
  };
  inventory?: {
    totalValue: number;
    lowStockItems: number;
    fastMovingProducts?: Array<{ name: string; sold: number }>;
  };
  customers?: {
    totalCustomers: number;
    newCustomers: number;
    avgCustomerValue: number;
  };
  cashFlow?: Array<{
    month: string;
    inflow: number;
    outflow: number;
    net: number;
  }>;
  categoryData?: Array<{
    name: string;
    revenue: number;
    percentage: number;
  }>;
}

export const generateReportPDF = (reportData: ReportData) => {
  const doc = new jsPDF();
  let yPos = 20;

  // Header
  doc.setFontSize(24);
  doc.setTextColor(59, 130, 246); // Blue color
  doc.text('BUSINESS REPORT', 20, yPos);
  
  yPos += 15;
  doc.setFontSize(14);
  doc.setTextColor(0, 0, 0);
  doc.text(`Report Type: ${reportData.title}`, 20, yPos);
  yPos += 8;
  doc.text(`Period: ${reportData.period}`, 20, yPos);
  yPos += 8;
  doc.text(`Generated: ${reportData.generatedAt}`, 20, yPos);
  yPos += 20;

  // Financial Summary
  if (reportData.financial) {
    doc.setFontSize(16);
    doc.setTextColor(34, 197, 94); // Green color
    doc.text('FINANCIAL SUMMARY', 20, yPos);
    yPos += 15;

    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.text(`Total Revenue: Rs. ${reportData.financial.revenue.toLocaleString()}`, 25, yPos);
    yPos += 8;
    doc.text(`Total Expenses: Rs. ${reportData.financial.expenses.toLocaleString()}`, 25, yPos);
    yPos += 8;
    doc.text(`Net Profit: Rs. ${reportData.financial.profit.toLocaleString()}`, 25, yPos);
    yPos += 8;
    doc.text(`Profit Margin: ${reportData.financial.profitMargin}%`, 25, yPos);
    yPos += 15;
  }

  // Sales Summary
  if (reportData.sales) {
    doc.setFontSize(16);
    doc.setTextColor(59, 130, 246); // Blue color
    doc.text('SALES SUMMARY', 20, yPos);
    yPos += 15;

    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.text(`Total Sales: ${reportData.sales.totalSales}`, 25, yPos);
    yPos += 8;
    doc.text(`Average Order Value: Rs. ${reportData.sales.avgOrderValue.toLocaleString()}`, 25, yPos);
    yPos += 15;
  }

  // Customer Summary
  if (reportData.customers) {
    doc.setFontSize(16);
    doc.setTextColor(147, 51, 234); // Purple color
    doc.text('CUSTOMER SUMMARY', 20, yPos);
    yPos += 15;

    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.text(`Total Customers: ${reportData.customers.totalCustomers}`, 25, yPos);
    yPos += 8;
    doc.text(`New Customers: ${reportData.customers.newCustomers}`, 25, yPos);
    yPos += 8;
    doc.text(`Avg Customer Value: Rs. ${reportData.customers.avgCustomerValue.toLocaleString()}`, 25, yPos);
    yPos += 15;
  }

  // Cash Flow Data
  if (reportData.cashFlow && reportData.cashFlow.length > 0) {
    if (yPos > 200) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(16);
    doc.setTextColor(245, 158, 11); // Orange color
    doc.text('CASH FLOW ANALYSIS', 20, yPos);
    yPos += 15;

    // Table header
    doc.setFontSize(10);
    doc.setFillColor(240, 240, 240);
    doc.rect(20, yPos, 150, 8, 'F');
    doc.text('Month', 25, yPos + 6);
    doc.text('Inflow', 60, yPos + 6);
    doc.text('Outflow', 100, yPos + 6);
    doc.text('Net', 140, yPos + 6);
    yPos += 12;

    // Table rows
    reportData.cashFlow.forEach((row) => {
      doc.text(row.month, 25, yPos);
      doc.text(`Rs. ${row.inflow.toLocaleString()}`, 60, yPos);
      doc.text(`Rs. ${row.outflow.toLocaleString()}`, 100, yPos);
      doc.text(`Rs. ${row.net.toLocaleString()}`, 140, yPos);
      yPos += 8;
    });
    yPos += 10;
  }

  // Category Performance
  if (reportData.categoryData && reportData.categoryData.length > 0) {
    if (yPos > 220) {
      doc.addPage();
      yPos = 20;
    }

    doc.setFontSize(16);
    doc.setTextColor(239, 68, 68); // Red color
    doc.text('CATEGORY PERFORMANCE', 20, yPos);
    yPos += 15;

    reportData.categoryData.forEach((category) => {
      doc.setFontSize(11);
      doc.text(`${category.name}: Rs. ${category.revenue.toLocaleString()} (${category.percentage}%)`, 25, yPos);
      yPos += 8;
    });
  }

  // Footer - Fixed to use correct jsPDF API
  const pageCount = (doc as any).internal.pages.length - 1; // Subtract 1 because pages array includes a null first element
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${i} of ${pageCount}`, 20, 285);
    doc.text('Generated by IMS - Inventory Management System', 120, 285);
  }

  // Download
  const fileName = `${reportData.title.replace(/\s+/g, '_')}_${reportData.period}_Report.pdf`;
  doc.save(fileName);
};
